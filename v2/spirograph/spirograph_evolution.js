//-------------------------------------------------------------------------------------------------
// Spirograph sequence. A set of spirograph object generated by incrementally varying some
// parameters
// (c) John Whitehouse 2013-2023
// www.eddaardvark.co.uk
//
// Depends on SVGColours: colours.js
//-------------------------------------------------------------------------------------------------

SpirographEvolution = function ()
{
}
//-------------------------------------------------------------------------------------------------
SpirographEvolution.GetDefault = function ()
{
    var ret = new SpirographEvolution ();
    
    ret.num_children = 20;      // The number of instances in the sequence
    ret.parent = null;          // The spirograph pattern that creates the children
    ret.children = [];          // The children
    ret.mode = SpirographController.Single;
    
    return ret;
}
// Copies the evolution data but doesn't create a new family

SpirographEvolution.MakeCopy = function (other)
{
    var ret = new SpirographEvolution ();
       
    ret.num_children = other.num_children;
    
    return ret;
}
//-------------------------------------------------------------------------------------------------
SpirographEvolution.prototype.CreateStandardChildren = function ()
{
    this.children [0] = SpirographData.MakeCopy (this.parent);
    
    for (var i = 1 ; i < this.num_children ; ++i)
    {
        this.children [i] = SpirographData.MakeCopy (this.parent);
        this.children [i].Randomise ();
    }
}
//-------------------------------------------------------------------------------------------------
SpirographEvolution.prototype.CreateSplitChildren = function ()
{
    for (var i = 0 ; i < this.num_children ; ++i)
    {
        this.children [i] = SpirographSplit.MakeCopy (this.parent);
        
        if (i > 0)
            this.children [i].Randomise ();
        
        this.children [i].MakeComponents (this.parent.spirograph);
    }
}
//-------------------------------------------------------------------------------------------------
SpirographEvolution.prototype.CreateOverlayChildren = function ()
{    
    for (var i = 0 ; i < this.num_children ; ++i)
    {
        this.children [i] = SpirographSequence.MakeCopy (this.parent);
        
        if (i > 0)
            this.children [i].Randomise ();

        this.children [i].MakeSequence (this.parent.spirograph, true);
    }
}
//-------------------------------------------------------------------------------------------------
SpirographEvolution.prototype.SetParent = function (parent, mode)
{
    this.parent = parent;
    this.mode = mode;
    this.Evolve ();
}
//-------------------------------------------------------------------------------------------------
SpirographEvolution.prototype.CreateNextGeneration = function (cell)
{
    this.parent = this.children [cell];
    this.Evolve ();
}
//-------------------------------------------------------------------------------------------------
SpirographEvolution.prototype.Evolve = function ()
{
    this.Fix ();
    this.children = [];

    switch (this.mode)
    {
    case SpirographController.Split:
        this.CreateSplitChildren ();
        break;
        
    case SpirographController.Single:
        this.CreateStandardChildren ();
        break;
        
    case SpirographController.Overlay:
        this.CreateOverlayChildren ();
        break;
    }
}
//-------------------------------------------------------------------------------------------------
// Animate the individual children

SpirographEvolution.prototype.Animate = function ()
{
    var ret = "";
    
    for (var idx in this.children)
    {
       this.children [idx].Animate ();
    }
    return ret;
}
//-------------------------------------------------------------------------------------------------
SpirographEvolution.prototype.Fix = function ()
{
    if (this.num_children < 4) this.num_children = 4;
}

//-------------------------------------------------------------------------------------------------
SpirographEvolution.prototype.toString = function ()
{
    return SpirographEvolution.Types [this.sequence_type] + ": Children = " + this.num_children;
}

