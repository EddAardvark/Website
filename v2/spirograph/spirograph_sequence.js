//-------------------------------------------------------------------------------------------------
// Spirograph sequence. A set of spirograph object generated by incrementally varying some
// parameters
// (c) John Whitehouse 2013-2023
// www.eddaardvark.co.uk
//
// Depends on SVGColours: colours.js
//-------------------------------------------------------------------------------------------------

SpirographSequence = function ()
{
}


// Identifies what to vary

SpirographSequence.VMODE_NONE = 0;
SpirographSequence.VMODE_PHASE = 1;
SpirographSequence.VMODE_SIZE = 2;
SpirographSequence.VMODE_RATE = 3;

SpirographSequence.VARY_MODE_NAMES = ["None", "Phase", "Size", "Rate"];
//-------------------------------------------------------------------------------------------------
SpirographSequence.GetDefault = function ()
{
    var ret = new SpirographSequence ();
    
    ret.points_delta = 0;                               // Change in the number of points between images
    ret.line_colours = ['white','black'];               // How line colour varies
    ret.fill_colours = ['blue','indigo', 'violet'];     // How line colour varies
    ret.num_frames = 25;                               // The number of instances in the sequence
    ret.scale_factor = 0.98;                            // How the size changes (should be <= 1)
    ret.rotate = 2;                                     // Angle in degrees to rotate the whole pattern
    ret.active_wheel = 0;                               // Which wheel varies between frames (mode != NONE)
    ret.vary_mode = SpirographSequence.VMODE_NONE;      // Which wheel parameter varies
    ret.vary_param = 0;                                 // The amount the wheel parameter varies
    ret.spirograph = null;                              // The spirograph pattern that anchors the sequence
    ret.frames = [];                                    // The frames in the sequencesequence
    
    return ret;
}
// Copies the sequence data but doesn't create a new sequence

SpirographSequence.MakeCopy = function (other)
{
    var ret = new SpirographSequence ();
       
    ret.points_delta = other.points_delta;    
    ret.line_colours = [...other.line_colours];
    ret.fill_colours = [...other.fill_colours];
    ret.num_frames   = other.num_frames;
    ret.scale_factor = other.scale_factor;
    ret.rotate       = other.rotate;
    ret.active_wheel = other.active_wheel;
    ret.vary_mode    = other.vary_mode;           
    ret.vary_param   = other.vary_param;
    
    return ret;
}
//-------------------------------------------------------------------------------------------------
SpirographSequence.prototype.MakeSequence = function (spirograph, rescale)
{   
    this.Fix ();
    
    this.spirograph = spirograph;
    this.rescale = rescale;
    
    this.frames = [];
    this.frames [0] = SpirographData.MakeCopy (this.spirograph);
    this.frames [0].fill_colour = this.fill_colours [0];
    this.frames [0].line_colour = this.line_colours [0];
    this.frames [0].back_colour = "transparent";
    
    if (this.rescale)
    {
        this.frames[0].scale = (this.scale_factor > 1) ? Math.pow (this.scale_factor, 1-this.num_frames) : 1;
    }
    
    for (var i = 1 ; i < this.num_frames ; ++i)
    {
        this.frames [i] = SpirographData.MakeCopy (this.frames [i-1]);
        this.Advance (this.frames [i], i);
    }
}
//-------------------------------------------------------------------------------------------------
SpirographSequence.prototype.Advance = function (spirograph, idx)
{
    spirograph.num_points += this.points_delta;

    if (this.rescale)
    {
        spirograph.scale *= this.scale_factor;
    }
    
    // Wheel parameters
    
    if (this.vary_mode == SpirographSequence.VMODE_PHASE)
    {
        spirograph.wheel_phases [this.active_wheel] += this.vary_param;
    }
    if (this.vary_mode == SpirographSequence.VMODE_SIZE)
    {
        spirograph.wheel_sizes [this.active_wheel] *= this.vary_param;
    }
    if (this.vary_mode == SpirographSequence.VMODE_RATE)
    {
        spirograph.wheel_rates [this.active_wheel] += this.vary_param;
    }
    
    spirograph.Rotate (this.rotate);

    if (spirograph.num_points < 3) spirograph.num_points = 3;

    var f = idx / (this.num_frames-1);
    
    spirograph.line_colour = SVGColours.MultiBlend (this.line_colours, f);
    spirograph.fill_colour = SVGColours.MultiBlend (this.fill_colours, f);
}

SpirographSequence.prototype.SetConfig = function ()
{
    seq_dpts.value     = this.points_delta;
    seq_linecols.value = SpirographController.ColoursToText(this.line_colours);
    seq_fillcols.value = SpirographController.ColoursToText(this.fill_colours);    
    seq_num.value      = this.num_frames;
    seq_dsize.value    = this.scale_factor;
    seq_dtheta.value   = this.rotate;
    seq_wheel.value    = this.active_wheel;
    seq_vmode.value    = this.vary_mode;
    seq_vparam.value   = this.vary_param;
}
SpirographSequence.prototype.ReadConfig = function ()
{
    this.points_delta = parseInt (seq_dpts.value);
    this.line_colours = SpirographController.RemoveBlanks(seq_linecols.value.split (" "));
    this.fill_colours = SpirographController.RemoveBlanks(seq_fillcols.value.split (" "));
    this.num_frames   = parseInt (seq_num.value);
    this.scale_factor = parseFloat (seq_dsize.value);
    this.rotate       = parseFloat (seq_dtheta.value);
    this.active_wheel = parseInt (seq_wheel.value);
    this.vary_mode    = parseInt (seq_vmode.value);
    this.vary_param   = parseFloat (seq_vparam.value);
}
//-------------------------------------------------------------------------------------------------
SpirographSequence.prototype.Fix = function ()
{
    if (this.num_frames < 2) this.num_frames = 2;
    if (this.line_colours.length < 1) this.line_colours = ["black"];
    if (this.fill_colours.length < 1) this.fill_colours = ["white"];
    if (this.scale_factor > 10) this.scale_factor = 10;
    if (this.scale_factor < 0.1) this.scale_factor = 0.1; 
    if (this.vary_mode < 0 || this.vary_mode >= SpirographSequence.VARY_MODE_NAMES.length) this.vary_mode = SpirographSequence.VMODE_NONE;
    if (this.active_wheel < 0 || this.active_wheel >= SpirographData.max_wheels) this.vary_mode = SpirographSequence.VMODE_NONE;
}
//-------------------------------------------------------------------------------------------------
// Randomise some attributes
//-------------------------------------------------------------------------------------------------
SpirographSequence.prototype.Randomise = function ()
{
    var count = 0;
    
    this.randomiser_text =  "";
    
    do
    {
        for (var idx in SpirographSequence.Randomisers)
        {
            if (Misc.RandomInteger (7) == 0)
            {
                SpirographSequence.Randomisers [idx].call (this);
                count ++;
            }
        }
    }
    while (count == 0);
}
SpirographSequence.RandomisePointsDelta = function ()
{
    this.points_delta = Misc.RandomInteger (-1,1);
}
SpirographSequence.RandomiseLineColours = function ()
{
    var num_colours = Misc.RandomInteger (1,4);
    this.line_colours = [];
    for (var i = 0 ; i < num_colours ; ++i)
    {
        this.line_colours.push (SVGColours.RandomNamedColour ());
    }
}
SpirographSequence.RandomiseFillColours = function ()
{   
    var num_colours = Misc.RandomInteger (1,4);
    this.fill_colours = [];
    for (var i = 0 ; i < num_colours ; ++i)
    {
        this.fill_colours.push (SVGColours.RandomNamedColour ());
    }
}
SpirographSequence.RandomiseNumFrames = function ()
{
    this.num_frames = Misc.RandomInteger (2,50);
}
SpirographSequence.RandomiseScale = function ()
{    
    this.scale_factor = Math.pow (Math.random (), 0.1);
    
    if (Math.random () > 0.5) 
        this.scale_factor = 1 / this.scale_factor;
}
SpirographSequence.RandomiseRotate = function ()
{
    this.rotate = Misc.RandomInteger (-5,5) + Misc.RandomInteger (-5,5);
}
SpirographSequence.RandomiseActiveWheel = function ()
{
    this.active_wheel = Misc.RandomInteger (this.num_wheels);
}
SpirographSequence.RandomiseVaryMode = function ()
{
    this.vary_mode = Misc.RandomInteger (SpirographSequence.VARY_MODE_NAMES.length-1);
    
    switch (this.vary_mode)
    {
        case SpirographSequence.VMODE_NONE:
            break;
        
        case SpirographSequence.VMODE_PHASE:
            this.vary_param = Math.random () + Math.random () + Math.random () - 1.5;
            break;

        case SpirographSequence.VMODE_SIZE:
            this.vary_param = Misc.RandomInteger (-1, 1);
            break;
        
        case SpirographSequence.VMODE_RATE:
            this.vary_param = Misc.RandomInteger (-1, 1);
            break;
    }
}
//-------------------------------------------------------------------------------------------------
SpirographSequence.Randomisers =
    [
        SpirographSequence.RandomisePointsDelta,
        SpirographSequence.RandomiseLineColours,
        SpirographSequence.RandomiseFillColours,
        SpirographSequence.RandomiseNumFrames,
        SpirographSequence.RandomiseScale,
        SpirographSequence.RandomiseRotate,
        SpirographSequence.RandomiseActiveWheel,
        SpirographSequence.RandomiseVaryMode,
    ];
//-------------------------------------------------------------------------------------------------
// Construct the SVG to draw in a position and radius

SpirographSequence.prototype.GetSVG = function (xpos, ypos, radius)
{
    var ret = "";
    
    if (this.spirograph.back_colour != "transparent")
    {
        var r2 = radius * 1.05;
        ret += SVGHelp.Rect (-r2, -r2, 2 * r2, 2 * r2, this.spirograph.back_colour, "transparent");
    }
    
    for (var idx in this.frames)
    {
        ret += this.frames [idx].GetSVG (xpos, ypos, radius);
    }
    return ret;
}
//-------------------------------------------------------------------------------------------------
// Animate the individual frames

SpirographSequence.prototype.Animate = function ()
{
    var ret = "";
    
    for (var idx in this.frames)
    {
       this.frames [idx].Animate ();
    }
    return ret;
}
//-------------------------------------------------------------------------------------------------
SpirographSequence.prototype.toString = function ()
{
    return SpirographSequence.Types [this.sequence_type] + ": steps = " + this.num_frames;
}

